[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qadence2-expressions"
description = "Qadence 2 expressions consisting of symbolic expressions and blocks, i.e. quantum digital, analog, digital-analog and composite gates, together with their logic and engine."
readme = "README.md"
version = "0.2.0"
requires-python = ">=3.10"
license = { text = "Apache 2.0" }
keywords = ["quantum"]
authors = [
  { name = "Kaonan Micadei", email = "kaonan.micadei@pasqal.com" },
  { name = "Eduardo Maschio", email = "eduardo.maschio@pasqal.com" },
  { name = "Roland Guichard", email = "roland.guichard@pasqal.com" },
  { name = "Pim Venderbosch", email = "pim.venderbosch@pasqal.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

# always specify a version for each package
# to maintain consistency
dependencies = [
  "qadence2-ir"
]

[tool.hatch.metadata]
allow-direct-references = true
allow-ambiguous-features = true

# add one or more extras in the dependencies
[project.optional-dependencies]
extras = [
]

[project.urls]
Documentation = "https://pqs.pages.pasqal.com/qadence2-expressions/"
Issues = "https://github.com/pasqal-io/qadence2-expressions/-/issues"
Source = "https://github.com/pasqal-io/qadence2-expressions"

[tool.hatch.envs.default]
features = ["extras"]
dependencies = [
  "hypothesis",
  "pytest",
  "pytest-cov",
  "pytest-mypy",
  "pytest-xdist",
  "ipykernel",
  "pre-commit",
  "black",
  "isort",
  "ruff",
  "pydocstringformatter",
  "numpy",
  "torch",
]

[tool.hatch.envs.default.scripts]
test = "pytest -n auto {args}"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = """-vvv"""
xfail_strict = true
filterwarnings = [
  "ignore:Call to deprecated create function FieldDescriptor",
  "ignore:Call to deprecated create function Descriptor",
  "ignore:Call to deprecated create function EnumDescriptor",
  "ignore:Call to deprecated create function EnumValueDescriptor",
  "ignore:Call to deprecated create function FileDescriptor",
  "ignore:Call to deprecated create function OneofDescriptor",
  "ignore:distutils Version classes are deprecated.",
  "ignore::DeprecationWarning",
]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocstrings-python",
  "mkdocs-section-index",
  "mkdocs-exclude",
  "markdown-exec",
  "mike",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict {args}"
serve = "mkdocs serve --dev-addr localhost:8000"
test = "mkdocs build --clean --strict"

[[tool.hatch.envs.test.matrix]]
python = ["310", "311"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.gitignore",
    "/.pre-commit-config.yml",
    "/tests",
    "/docs",
    "/examples",
]

[tool.hatch.build.targets.wheel]
packages = ["qadence2_expressions"]

[tool.coverage.run]
branch = true
parallel = true
# uncomment to omit any file from the
# coverage. Regexps can be used
# to select all files from a folder
#omit = [
#  "template_python/to_omit.py",
#]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
lint.select = ["E", "F", "I", "Q"]
lint.extend-ignore = ["F841"]
line-length = 100
lint.exclude = ["*.ipynb"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = false
ignore_missing_imports = true
